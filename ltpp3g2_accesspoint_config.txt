#PATHS
etc_default_hostapd__fpath="/etc/default/hostapd"
etc_hostapd_hostapd_conf__fpath="/etc/hostapd/hostapd.conf"

sed_etc_hostapd_hostapd_conf__fpath=`echo "${etc_hostapd_hostapd_conf__fpath}" | sed 's/\//\\\\\\//g'`



#WIFI CONSTANTS
BCMDHD_DRIVER="nl80211"



#PATTERN CONSTANTS
SED_PATTERN_OLD="#DAEMON_CONF\\=\"\""
SED_PATTERN_NEW="DAEMON_CONF\\=${sed_etc_hostapd_hostapd_conf__fpath}"



#INSTALL SOFTWARE (IF NOT PRESENT)
sudo  apt -y install iw
sudo  apt -y install wireless-tools
sudo  apt -y install hostapd
sudo apt -y install dnsmasq



#DISABLE WPA_SUPPLICANT.SERVICE (if present)
sudo systemctl disable wpa_supplicant.service

#STOP WPA_SUPPLICANT.SERVICE (if present)
sudo systemctl stop wpa_supplicant.service

#KILL ALL WPA_SUPPLICANT DAEMON
#---GET PID of TEST DAEMON
#---REMARK:
#---TWO daemons could be running:
#---1. WPA_SUPPLICANT DAEMON: /sbin/wpa_supplicant -B -c /etc/wpa_supplicant.conf -iwlan0 (executed in function: 'wpa_supplicant_start_daemon__func')
#---2. NETPLAN DAEMON: /sbin/wpa_supplicant -c /run/netplan/wpa-wlan0.conf -iwlan0 (implicitely started after executing 'netplan apply')
#---GET THEIR PIDs
local ps_pidList_string=`ps axf | grep -E "wpa_supplicant.*$wlan0" | grep -v "grep" | awk '{print $1}' 2>&1`

#Convert string to array
eval "ps_pidList_array=(${ps_pidList_string})"

#KILL DAEMON
for ps_pidList_item in "${ps_pidList_array[@]}"; do 
	kill -9 ${ps_pidList_item}
done



#RENAME/REMOVE *OLD* /ETC/NETPLAN/WLAN.YAML
sudo rm /etc/netplan/wlan.yaml



#CREATE *NEW* /ETC/NETPLAN/WLAN.YAML
network:
  version: 2
  renderer: networkd
  ethernets:
    wlan0:
      dhcp4: no
  bridges:
    br0:
      interfaces:
        - wlan0
      addresses:
        - 192.45.46.1/24




#CONFIGURE /ETC/DEFAULT/HOSTAPD
sed -i "s/${SED_PATTERN_OLD}/${SED_PATTERN_NEW}/g" ${etc_default_hostapd__fpath}



#CREATE AND ADD LINES TO CONFIG FILE
cat <<EOF > ${etc_hostapd_hostapd_conf__fpath}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# For more information, see: https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#---Wireless network name
interface=wlan0



#---Set your bridge name
bridge=br0



#---Driver name
driver=nl80211



#---Country Code (NL = Netherlands, TW = TAIWAN, US = United States, etc.)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Country code (ISO/IEC 3166-1). Used to set regulatory domain.
# Set as needed to indicate country in which device is operating.
# This can limit available channels and transmit power.
# These two octets are used as the first two octets of the Country String
# (dot11CountryString)
# REMARKS:
# 1. This 'country-code' MUST be the same as the configured 'country-code which
#    can be set with command:
#       iw reg set <country-code>
# 2. To get the 'country-code' use command:
#       iw reg get | grep "country.*" | cut -d":" -f1 | awk '{print $2}'
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
country_code=TW



#---Set SSID
ssid=ltpp2g2_rt

#---DFS
# Enable IEEE 802.11d. This advertises the country_code and the set of allowed
# channels and transmit power levels based on the regulatory limits. The
# country_code setting must be configured with the correct country for
# IEEE 802.11d functions.
# (default: 0 = disabled)
#ieee80211d=1

# Enable IEEE 802.11h. This enables radar detection and DFS support if
# available. DFS support is required on outdoor 5 GHz channels in most countries
# of the world. This can be used only with ieee80211d=1.
# (default: 0 = disabled)
#ieee80211h=1

#---Set operation mode
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Operation mode (a = IEEE 802.11a (5 GHz), b = IEEE 802.11b (2.4 GHz),
# g = IEEE 802.11g (2.4 GHz), ad = IEEE 802.11ad (60 GHz); a/g options are used
# with IEEE 802.11n (HT), too, to specify band). For IEEE 802.11ac (VHT), this
# needs to be set to hw_mode=a. For IEEE 802.11ax (HE) on 6 GHz this needs
# to be set to hw_mode=a. When using ACS (see channel parameter), a
# special value "any" can be used to indicate that any support band can be used.
# This special case is currently supported only with drivers with which
# offloaded ACS is used.
# Default: IEEE 802.11b
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
hw_mode=abg

# ieee80211ac: Whether IEEE 802.11ac (VHT) is enabled
# 0 = disabled (default)
# 1 = enabled
# Note: You will also need to enable WMM for full VHT functionality.
# Note: hw_mode=a is used to specify that 5 GHz band is used with VHT.
ieee80211ac=1

# ieee80211n: Whether IEEE 802.11n (HT) is enabled
# 0 = disabled (default)
# 1 = enabled
# Note: You will also need to enable WMM for full HT functionality.
# Note: hw_mode=g (2.4 GHz) and hw_mode=a (5 GHz) is used to specify the band.
ieee80211n=1



#---Set channel
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Channel number (IEEE 802.11)
# (default: 0, i.e., not set)
# Please note that some drivers do not use this value from hostapd and the
# channel will need to be configured separately with iwconfig.
#
# If CONFIG_ACS build option is enabled, the channel can be selected
# automatically at run time by setting channel=acs_survey or channel=0, both of
# which will enable the ACS survey based algorithm.
# 
# REMARKS:
# - ACS does NOT work!
# - A channel > 0 must be set!
# - for 'ntios' we will not set any channels.
#
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
channel=6



#---Set WEP-mode
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Static WEP key configuration
#
# The key number to use when transmitting.
# It must be between 0 and 3, and the corresponding key must be set.
# default: not set
# wep_default_key=0 (use wep_key0) -> input is hex-digits (10 (64b), 26 (128b), 32(152b)) -> use this!
# wep_default_key=1 (use wep_key1) -> input is ASCII-chars (5 (64b), 13 (128b), 16(152b)) -> not going to use this
# wep_default_key=2 (use wep_key2) -> not going to use this
# wep_default_key=3 (use wep_key3) -> not going to use this
# The WEP keys to use.
# A key may be a quoted string or unquoted hexadecimal digits.
# The key length should be 5, 13, or 16 characters, or 10, 26, or 32
# digits, depending on whether 40-bit (64-bit), 104-bit (128-bit), or
# 128-bit (152-bit) WEP is used.
# Only the default key must be supplied; the others are optional.
# 
# default: not set
#
# EXAMPLES:
#   wep_key0=123456789a
#   wep_key1="vwxyz"
#   wep_key2=0102030405060708090a0b0c0d
#   wep_key3=".2.4.6.8.0.23"
#
# IMPORTANT:
#   1. wep_default_key is always set to '0'
#   2. do not forget to set 'auth_algs = 2' (WEP-only) or 'auth_algs = 3' (WEP and WPA)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#wep_default_key=0
#***Example (64-bit)
#wep_key0=123456789a
#***Example (128-bit)
#wep_key0=112233445566778899aabbccdd



#---Set WPA-mode
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Enable WPA. Setting this variable configures the AP to require WPA (either
# WPA-PSK or WPA-RADIUS/EAP based on other configuration). For WPA-PSK, either
# wpa_psk or wpa_passphrase must be set and wpa_key_mgmt must include WPA-PSK.
# Instead of wpa_psk / wpa_passphrase, wpa_psk_radius might suffice.
# For WPA-RADIUS/EAP, ieee8021x must be set (but without dynamic WEP keys),
# RADIUS authentication server must be configured, and WPA-EAP must be included
# in wpa_key_mgmt.
# This field is a bit field that can be used to enable WPA (IEEE 802.11i/D3.0)
# and/or WPA2 (full IEEE 802.11i/RSN):
# bit0 = WPA (wpa=1)
# bit1 = IEEE 802.11i/RSN (WPA2) (dot11RSNAEnabled) (wpa=2)
# Note that WPA3 is also configured with bit1 since it uses RSN just like WPA2.
# In other words, for WPA3, wpa=2 is used the configuration (and
# wpa_key_mgmt=SAE for WPA3-Personal instead of wpa_key_mgmt=WPA-PSK).
#
# IMPORTANT: do not forget to set 'auth_algs = 1' (WEP-only) or 'auth_algs = 3' (WEP and WPA)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
wpa=2

#---Set WPA-phrase
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# WPA pre-shared keys for WPA-PSK. This can be either entered as a 256-bit
# secret in hex format (64 hex digits), wpa_psk, or as an ASCII passphrase
# (8..63 characters) that will be converted to PSK. This conversion uses SSID
# so the PSK changes when ASCII passphrase is used and the SSID is changed.
# wpa_psk (dot11RSNAConfigPSKValue): hex-format (64 hex-digits)
# wpa_passphrase (dot11RSNAConfigPSKPassPhrase): ASCII-chars (8..63 characters)
#
# EXAMPLES:
#   wpa_passphrase=viezevuilehond
#   wpa_psk=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
#
# IMPORTANT:
#   1. For the ease of use, we will only consider using 'wpa_passphrase'
#   2. Do not place the phrase between quotes("), because these quotes will also
#       be considered to be part of the phrase.
#      For example: 
#       wpa_passphrase="viezevuilehond" <- quotes are considered to be part of phrase.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
wpa_passphrase=tibbo168



#------WPA-Key Management Algoritms
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Set of accepted key management algorithms (WPA-PSK, WPA-EAP, or both). The
# entries are separated with a space. WPA-PSK-SHA256 and WPA-EAP-SHA256 can be
# added to enable SHA256-based stronger algorithms.
# WPA-PSK = WPA-Personal / WPA2-Personal
# WPA-PSK-SHA256 = WPA2-Personal using SHA256
# WPA-EAP = WPA-Enterprise / WPA2-Enterprise
# WPA-EAP-SHA256 = WPA2-Enterprise using SHA256
# SAE = SAE (WPA3-Personal)
# WPA-EAP-SUITE-B-192 = WPA3-Enterprise with 192-bit security/CNSA suite
# FT-PSK = FT with passphrase/PSK
# FT-EAP = FT with EAP
# FT-EAP-SHA384 = FT with EAP using SHA384
# FT-SAE = FT with SAE
# FILS-SHA256 = Fast Initial Link Setup with SHA256
# FILS-SHA384 = Fast Initial Link Setup with SHA384
# FT-FILS-SHA256 = FT and Fast Initial Link Setup with SHA256
# FT-FILS-SHA384 = FT and Fast Initial Link Setup with SHA384
# OWE = Opportunistic Wireless Encryption (a.k.a. Enhanced Open)
# DPP = Device Provisioning Protocol
# OSEN = Hotspot 2.0 online signup with encryption
# (dot11RSNAConfigAuthenticationSuitesTable)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
wpa_key_mgmt=WPA-PSK



#------CYPHER
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Set of accepted cipher suites (encryption algorithms) for pairwise keys
# (unicast packets). This is a space separated list of algorithms:
# CCMP = AES in Counter mode with CBC-MAC (CCMP-128)
# TKIP = Temporal Key Integrity Protocol
# CCMP-256 = AES in Counter mode with CBC-MAC with 256-bit key
# GCMP = Galois/counter mode protocol (GCMP-128)
# GCMP-256 = Galois/counter mode protocol with 256-bit key
# Group cipher suite (encryption algorithm for broadcast and multicast frames)
# is automatically selected based on this configuration. If only CCMP is
# allowed as the pairwise cipher, group cipher will also be CCMP. Otherwise,
# TKIP will be used as the group cipher. The optional group_cipher parameter can
# be used to override this automatic selection.
#
# (dot11RSNAConfigPairwiseCiphersTable)
# (dot11RSNAConfigPairwiseCiphersTable)
# Pairwise cipher for WPA (v1) (default: TKIP)
# Pairwise cipher for RSN/WPA2 (default: use wpa_pairwise value)
#
# EXAMPLES:
#   wpa_pairwise=TKIP       -> WPA: TKIP
#   wpa_pairwise=CCMP       -> WPA: AES-128
#   wpa_pairwise=TKIP CCMP  -> WPA: TKIP + AES-128
#   rsn_pairwise=CCMP       -> WPA2: AES-128
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
wpa_pairwise=TKIP
rsn_pairwise=CCMP



#------Authentication Algorithms 
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# IEEE 802.11 specifies two authentication algorithms. hostapd can be
# configured to allow both of these or only one. Open system authentication
# should be used with IEEE 802.1X.
# Bit fields of allowed authentication algorithms:
# bit 0 = Open System Authentication (auth_algs=1: WPA-modes)
# bit 1 = Shared Key Authentication (requires WEP) (auth_algs=2: WEP)
# (auth_algs=3: WPA-modes and WEP)
#
# EXAMPLES:
# auth_algs=1   -> WPA-modes
# auth_algs=2   -> WEP
# auth_algs=3   -> WEP + WPA-modes
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
auth_algs=1



#------MAC-Address Based Authentication
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Station MAC address -based authentication
# Please note that this kind of access control requires a driver that uses
# hostapd to take care of management frame processing and as such, this can be
# used with driver=hostap or driver=nl80211, but not with driver=atheros.
# 0 = accept unless in deny list
# 1 = deny unless in accept list
# 2 = use external RADIUS server (accept/deny lists are searched first)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
macaddr_acl=0



#------HIDDEN SSID
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Send empty SSID in beacons and ignore probe request frames that do not
# specify full SSID, i.e., require stations to know SSID.
# 0 = disabled (default)
# 1 = send empty (length=0) SSID in beacon and ignore probe request for
#     broadcast SSID
# 2 (HIDDEN) = clear SSID (ASCII 0), but keep the original length (this may be required
#     with some clients that do not support empty SSID) and ignore probe
#     requests for broadcast SSID
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ignore_broadcast_ssid=0

EOF



#START/STOP/RESTART/STATUS SERVICE
sudo systemctl unmask hostapd.service
sudo systemctl enable hostapd.service
sudo systemctl start hostapd.service
sudo systemctl stop hostapd.service
sudo systemctl restart hostapd.service



#MAKE SURE TO ADD THE FOLLOWING TO /ETC/SUDOERS
ubuntu  ALL=(root) NOPASSWD: /sbin/iw *
ubuntu  ALL=(root) NOPASSWD: /sbin/iwlist *
ubuntu  ALL=(root) NOPASSWD: /sbin/iwconfig *
ubuntu  ALL=(root) NOPASSWD: /bin/systemctl *




#IPTABLES: ADD RULES
#---INFO REGARDING INTERFACES:
#		br0 is LAN
#		eth0 is WAN

#---ALWAYS ACCEPT LOOP-BACK TRAFFIC
sudo iptables -A INPUT -i lo -j ACCEPT

#---ALLOW LAN TRAFFIC
sudo iptables -A INPUT -i br0 -j ACCEPT

#---ALLOW ESTABLISHED CONNECTIONS
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#---MASQUERADE
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

#---FORWARDING FROM eth0 to br0
sudo iptables -A FORWARD -i eth0 -o br0 -m state --state RELATED,ESTABLISHED -j ACCEPT

#---ALLOW OUTGOING CONNECTIONS FROM LAN
sudo iptables -A FORWARD -i br0 -o eth0 -j ACCEPT